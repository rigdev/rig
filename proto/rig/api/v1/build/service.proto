syntax = "proto3";

package api.v1.build;

import "google/protobuf/timestamp.proto";
import "api/v1/capsule/build.proto";
import "model/common.proto";

service Service {
  // Get Information about an image in a build.
  rpc GetImageInfo(GetImageInfoRequest) returns (GetImageInfoResponse) {}
  // Get Information about a docker registry repository.
  rpc GetRepositoryInfo(GetRepositoryInfoRequest)
      returns (GetRepositoryInfoResponse) {}
  // Get a build.
  rpc Get(GetRequest) returns (GetResponse) {}
  // Create a new build.
  // Builds are immutable and cannot change. Create a new build to make
  // changes from an existing one.
  rpc Create(CreateRequest) returns (CreateResponse) {}
  // List builds for a capsule.
  rpc List(ListRequest) returns (ListResponse) {}
  // Delete a build.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

// Request to get information about an image.
message GetImageInfoRequest {
  string image = 1; // The image to get information about.
}

// Reponse to GetImageInfo request, containing information about an image.
message GetImageInfoResponse {
  ImageId image_id = 1; // Image ID.
  string image_string = 2; // Image from the request.
  google.protobuf.Timestamp created_at = 3; // When the image was created.
  api.v1.capsule.Origin origin = 4; // Origin of the image.
}

// A collection of image properties that uniquely identifies an image.
message ImageId {
  string registry = 1; // Docker Registry.
  string repository = 2; // Docker Repository.
  string tag = 3; // Tag of the image.
  string digest = 4; // Digest of the image.
}

// Get repository information request.
message GetRepositoryInfoRequest {
  string registry = 1; // Docker Registry
  string repository = 2; // Docker Repository
}

// Get repository information response.
message GetRepositoryInfoResponse {
  repeated Tag tags = 1; // Image Tags in the repository.
}

// A docker image tag.
message Tag {
  string tag = 1; // Tag of the image.
  google.protobuf.Timestamp image_created_at = 2; // When the image was created.
}


// Request to create a new build in a capsule.
message CreateRequest {
  string capsule_id = 1; // Capsule to create the build in.
  string image = 2; // Image to create the build from.
  string digest = 3; // Digest of the image.
  api.v1.capsule.Origin origin = 4; // Origin of the image
  map<string, string> labels = 5; // Meta data to attach to the build.
  bool skip_image_check = 6; // if true skip check if image exists.
  string project_id = 7; // Project ID.
}

// Response to create a new build in a capsule.
message CreateResponse {
  string build_id = 1; // ID of the build.
  bool created_new_build = 2; // True if a new build was created.
}


// Request to list builds.
message ListRequest {
  string capsule_id = 1; // Capsule to list builds in.
  model.Pagination pagination = 2; // Pagination options.
  string project_id = 3; // Project ID.
}


// Reponse to list builds.
message ListResponse {
  repeated api.v1.capsule.Build builds = 1; // Builds in the capsule.
  uint64 total = 2; // Total number of builds in the capsule.
}

// Request to delete a build.
message DeleteRequest {
  string capsule_id = 1; // Capsule to delete the build from.
  string build_id = 2; // Build to delete.
  string project_id = 3; // Project ID.
}

// Empty response to delete a build.
message DeleteResponse {}

// Request to get a build.
message GetRequest {
  string capsule_id = 1; // Capsule to get the build from.
  string build_id = 2; // Build to get.
  string project_id = 3; // Project ID.
}

// Response to get a build.
message GetResponse {
  api.v1.capsule.Build build = 1; // The build to retrieve
}
