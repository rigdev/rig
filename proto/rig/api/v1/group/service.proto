syntax = "proto3";

package api.v1.group;

import "api/v1/group/group.proto";
import "model/common.proto";
import "model/user.proto";

// The service to manage groups in Users
service Service {
  // Create a new group
  rpc Create(CreateRequest) returns (CreateResponse) {}
  // Delete group
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  // List groups
  rpc List(ListRequest) returns (ListResponse) {}
  // Update group
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  // Get group
  rpc Get(GetRequest) returns (GetResponse) {}
  // Add a member to a group
  rpc AddMember(AddMemberRequest) returns (AddMemberResponse) {}
  // Remove member from Group
  rpc RemoveMember(RemoveMemberRequest) returns (RemoveMemberResponse) {}
  // Get Group Members
  rpc ListMembers(ListMembersRequest) returns (ListMembersResponse) {}
  // Get Groups
  rpc ListGroupsForMember(ListGroupsForMemberRequest)
      returns (ListGroupsForMemberResponse) {}
}

// The request of a Groups.Create RPC
message CreateRequest {
  repeated api.v1.group.Update initializers = 1;
}

// The response of a Groups.Create RPC
message CreateResponse {
  api.v1.group.Group group = 1;
}

// The request of a Groups.List RPC
message ListRequest {
  model.Pagination pagination = 1;
  string search = 2;
}

// The response of a Groups.List RPC
message ListResponse {
  // list of groups
  repeated api.v1.group.Group groups = 1;
  // count of total amount of groups
  uint64 total = 2;
}

// The request of a Group.Delete RPC
message DeleteRequest {
  // The group to delete
  string group_id = 1;
}

// The response of a Group.Delete RPC
message DeleteResponse {}

// The request of a Groups.Update RPC
message UpdateRequest {
  repeated api.v1.group.Update updates = 1;
  // The group id
  string group_id = 2;
}

// The response of a Groups.Update RPC
message UpdateResponse {}

// The request of a Groups.Get RPC
message GetRequest {
  // The group id
  string group_id = 1;
}

// The response of a Groups.Get RPC
message GetResponse {
  api.v1.group.Group group = 1;
}

message AddMemberRequest {
  string group_id = 1;
  repeated api.v1.group.MemberID member_ids = 2;
}

message AddMemberResponse {}

message RemoveMemberRequest {
  string group_id = 1;
  api.v1.group.MemberID member_id = 2;
}

message RemoveMemberResponse {}

message ListMembersRequest {
  string group_id = 1;
  model.Pagination pagination = 2;
}

message ListMembersResponse {
  repeated model.MemberEntry members = 1;
  uint64 total = 2;
}

message ListGroupsForMemberRequest {
  api.v1.group.MemberID member_id = 1;
  model.Pagination pagination = 2;
}

message ListGroupsForMemberResponse {
  repeated api.v1.group.Group groups = 1;
  uint64 total = 2;
}
