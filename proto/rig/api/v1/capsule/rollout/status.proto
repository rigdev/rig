syntax = "proto3";

package api.v1.capsule.rollout;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Status is a representation of the current state of a rollout.
message Status {
  // The ID of the rollout.
  uint64 rollout_id = 1;
  // The current state of the rollout.
  State state = 2;
  // The stages of the rollout.
  Stages stages = 3;
  // The last time the rollout was updated.
  google.protobuf.Timestamp updated_at = 4;
  // The result of the rollout.
  Result result = 5;
}

// Information about a stage of a rollout.
message StageInfo {
  // Name of the stage.
  string name = 1;
  // The last time the stage was updated.
  google.protobuf.Timestamp updated_at = 2;
  // The current state of the stage.
  StageState state = 3;
  // The time the stage started.
  google.protobuf.Timestamp started_at = 4;
}

// Different states a stage can be in.
enum StageState {
  // The state is unspecified.
  STAGE_STATE_UNSPECIFIED = 0;
  // The stage is deploying.
  STAGE_STATE_DEPLOYING = 1;
  // The stage is running.
  STAGE_STATE_RUNNING = 2;
  // The stage is stopped.
  STAGE_STATE_STOPPED = 3;
}

// A generic step of a stage.
message GenericStep {
  // Step information.
  StepInfo info = 1;
}

// Information about a step of a stage.
message StepInfo {
  // Name of the step.
  string name = 1;
  // Messages in the step.
  string message = 2;
  // The last time the step was updated.
  google.protobuf.Timestamp updated_at = 3;
  // The current state of the step.
  StepState state = 4;
  // The time the step started.
  google.protobuf.Timestamp started_at = 5;
}

// Different states a step can be in.
enum StepState {
  // The state is unspecified.
  STEP_STATE_UNSPECIFIED = 0;
  // The step is ongoing.
  STEP_STATE_ONGOING = 1;
  // The step failed.
  STEP_STATE_FAILED = 2;
  // The step is done.
  STEP_STATE_DONE = 3;
}

// Different states a rollout can be in.
enum State {
  // The state is unspecified.
  STATE_UNSPECIFIED = 0;
  // The rollout is preparing.
  STATE_PREPARING = 1;
  // The rollout is configuring.
  STATE_CONFIGURE = 2;
  // The rollout is creating resources.
  STATE_RESOURCE_CREATION = 3;
  // The rollout is running.
  STATE_RUNNING = 4;
  // The rollout is stopped.
  STATE_STOPPED = 5;
}

// Different result of a rollout.
enum Result {
  // The result is unspecified.
  RESULT_UNSPECIFIED = 0;
  // The rollout has been replaced.
  RESULT_REPLACED = 1;
  // The rollout has failed.
  RESULT_FAILED = 2;
  // The rollout has been aborted.
  RESULT_ABORTED = 3;
  // The rollout has been rolled back.
  RESULT_ROLLBACK = 4;
}

// The three stages of a rollout
message Stages {
  // The configure stage.
  ConfigureStage configure = 1;
  // The resource creation stage.
  ResourceCreationStage resource_creation = 2;
  // The running stage.
  RunningStage running = 3;
}

// The configure stage.
message ConfigureStage {
  // Stage information.
  StageInfo info = 1;
  // The steps of the stage.
  repeated ConfigureStep steps = 2;
}

// A step of the configure stage.
message ConfigureStep {
  oneof step {
    // A generic step.
    GenericStep generic = 1;
    // A step configuring a capsule.
    ConfigureCapsuleStep configure_capsule = 2;
    // A step configuring a file.
    ConfigureFileStep configure_file = 3;
    // A step configuring an environment.
    ConfigureEnvStep configure_env = 4;
    // A step for commiting the changes to git.
    ConfigureCommitStep commit = 5;
  }
}

// A step configuring a capsule.
message ConfigureCapsuleStep {
  // Step information.
  StepInfo info = 1;
  // The state of the step.
  ConfigureResult state = 2;
}

// A step configuring a file.
message ConfigureFileStep {
  // Step information.
  StepInfo info = 1;
  // The result of the file configuration.
  ConfigureResult state = 2;
  // The path of the file.
  string path = 3;
  // Whether the file is a secret.
  bool is_secret = 4;
}

// A step configuring an environment.
message ConfigureEnvStep {
  // Step information.
  StepInfo info = 1;
  // The result of the environment configuration.
  ConfigureResult state = 2;
  // Whether the environment is a secret.
  bool is_secret = 3;
}

// A step committing the changes to git
message ConfigureCommitStep {
  // Step information
  StepInfo info = 1;
  // The hash of the commit containing the changes
  string commit_hash = 2;
  // The url to the commit (if known. May be empty)
  string commit_url = 3;
}

// The result of a configuration step.
enum ConfigureResult {
  // The result is unspecified.
  CONFIGURE_RESULT_UNSPECIFIED = 0;
  // The resource is to be created.
  CONFIGURE_RESULT_CREATED = 1;
  // The resource is to be updated.
  CONFIGURE_RESULT_UPDATED = 2;
  // The resource has no change.
  CONFIGURE_RESULT_NO_CHANGE = 3;
  // The resource is to be deleted.
  CONFIGURE_RESULT_DELETED = 4;
}

// The resource creation stage.
message ResourceCreationStage {
  // Stage information.
  StageInfo info = 1;
  // The steps of the stage.
  repeated ResourceCreationStep steps = 2;
}

// A step of the resource creation stage.
message ResourceCreationStep {
  oneof step {
    // A generic step.
    GenericStep generic = 1;
    // A step creating a resource.
    CreateResourceStep create_resource = 2;
  }
}

// A step creating a resource.
message CreateResourceStep {
  // Step information.
  StepInfo info = 1;
  // The kind of the resource.
  string kind = 2;
  // The name of the resource.
  string name = 3;
}

// The running stage.
message RunningStage {
  // Stage information.
  StageInfo info = 1;
  // The steps of the stage.
  repeated RunningStep steps = 2;
}

// A step of the running stage.
message RunningStep {
  oneof step {
    // A generic step.
    GenericStep generic = 1;
    // A step containing information on the instances of the rollout.
    InstancesStep instances = 2;
  }
}

// Information on the instances of the rollout.
message InstancesStep {
  // Step information.
  StepInfo info = 1;
  // The number of updated instances.
  uint32 num_updated = 2;
  // The number of ready instances.
  uint32 num_ready = 3;
  // The number of stuck instances.
  uint32 num_stuck = 4;
  // The number of instances with the wrong version.
  uint32 num_wrong_version = 5;
}

// Metric defines a custom Rollout metric
// Examples:
//
// Emit when rollout starts
//   - stage_name="configure", stage_state={"states": [], "not": true},
//   duration_since="start", duration=0s
//   - This stage_state matches all states of the Configure stage and
//   immediately triggers as duration is 0s
//
// ConfigureCluster takes more than 5 minutes
//   - stage_name="configure" stage_state={"states": ["done"], "not": true},
//   duration_since="stage_enter", duration=5min
//
// ResourceCreation takes more than 5 minutes
//   - stage_name="resource_creation" stage_state={"states": ["done"], "not":
//   true}, duration_since="stage_enter", duration=5min
//   - duration_since="stage_enter" first starts the timer when the rollout
//   reaches the ResourceCreation stage, and not from the begining
//
// At any point in time have Instances be in ONGOING/FAILED for more than 5
// minutes
//   - stage_name="running", step_type="instances", step_state={"states":
//   ["done"], "not": true}, duration_since=step_state_enter,
//   condition_type=any_time_in_condition, duration=5min
//
// Not been in Instances DONE since the start for 5 minutes, but its okay if it
// later on shifts from DONE to ONGOING/FAILEDNGOING/FAILED for more than 5
// minutes
//   - stage_name="running", step_type="instances", step_state={"states":
//   ["done"]}, negate_condition=true, duration_since=start,
//   condition_type=first_time_in_condition, duration=5min
//
// Not been in Instances DONE since entering RUNNING for 5 minutes, but its okay
// if it later on shifts from DONE to ONGOING/FAILEDNGOING/FAILED for more than
// 5 minutes
//   - stage_name="running", step_type="instances", step_state={"states":
//   ["done"], "not": true}, duration_since=stage_enter,
//   condition_type=first_time_in_condition, duration=5min
//
// I use strings instead of ENUMS because I envision people would write a YAML
// spec of this message when creating rollout metrics. Thus using ENUMs would
// change the yaml from interpretable strings to opaque integers.
message Metric {
  string name = 1;

  string stage_name = 2;
  StateSelector stage_state = 3;

  string step_type = 4;
  string step_name = 5;
  StateSelector step_state = 6;

  // start
  // stage_enter
  // stage_state_enter
  // step_enter
  // step_state_enter
  string duration_since = 7;
  google.protobuf.Duration duration = 8;
  bool negate_condition = 9;

  // TODO Find better name
  // first_time_in_condition
  // any_time_in_condition
  string condition_type = 10;
}

message StateSelector {
  repeated string states = 1;
  bool not = 2;
}
