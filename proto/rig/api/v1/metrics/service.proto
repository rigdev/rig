syntax = "proto3";

package api.v1.metrics;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "api/v1/metrics/metrics.proto";

service Service {
  // Retrieve metrics. metric_type is mandatory, while the rest of the fields
  // in the tags are optional. If project, env or capsule is not
  // specified, they will be treated as wildcards.
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {}
  // Retrive metrics for multiple sets of tags at a time. Metrics within the
  // same set of tags will be in ascending order of timestamp.
  rpc GetMetricsMany(GetMetricsManyRequest) returns (GetMetricsManyResponse) {}
  rpc GetMetricsExpression(GetMetricsExpressionRequest)
      returns (GetMetricsExpressionResponse) {}
}

message GetMetricsRequest {
  Tags tags = 1;
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to = 3;
  Aggregation aggregation = 4;
}

message GetMetricsResponse {
  repeated Metric metrics = 1;
}

message GetMetricsManyRequest {
  repeated Tags tags = 1;
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to = 3;
  Aggregation aggregation = 4;
}

message GetMetricsManyResponse {
  repeated MetricFull metrics = 1;
}

message Aggregation {
  Aggregator aggregator = 1;
  google.protobuf.Duration bucket_size = 2;
}

enum Aggregator {
  AGGREGATOR_UNSPECIFIED = 0;
  AGGREGATOR_AVG = 1;
  AGGREGATOR_MIN = 2;
  AGGREGATOR_MAX = 3;
  AGGREGATOR_SUM = 4;
}

message GetMetricsExpressionRequest {
  Expression expression = 1;
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to = 3;
  google.protobuf.Duration bucket_size = 4;
}

message GetMetricsExpressionResponse {
  repeated Metric metrics = 1;
}

message Expression {
  message Leaf {
    Tags tags = 1;
    Aggregator aggregator = 2;
    // Aggregation aggregation = 2;
  }

  message Operation {
    Expression left = 1;
    Expression right = 2;
    BinOp operation = 3;
  }

  message Constant {
    double constant = 1;
    // google.protobuf.Duration bucket_size = 2;
  }

  oneof expression {
    Leaf leaf = 1;
    Operation operation = 2;
    Constant constant = 3;
    // Aggregation aggregation = 4;
  }
}

enum BinOp {
  BINOP_UNSPECIFIED = 0;
  BINOP_ADD = 1;
  BINOP_SUB = 2;
  BINOP_MULT = 3;
  BINOP_DIV = 4;
}
