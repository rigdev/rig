syntax = "proto3";

package api.v1.environment;

import "api/v1/environment/environment.proto";
import "model/common.proto";

service Service {
  rpc Create(CreateRequest) returns (CreateResponse) {}
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  // List available environments.
  rpc List(ListRequest) returns (ListResponse) {}
  rpc GetNamespaces(GetNamespacesRequest) returns (GetNamespacesResponse) {}
}

message CreateRequest {
  string environment_id = 1;
  repeated api.v1.environment.Update initializers = 2;
  string cluster_id = 3;
  // Namespace template is used to generate the namespace name when configuring
  // resources. Default is to set the namespace equal to the project name.
  // Default value is: {{ .Project.Name }}
  // Valid template properties are:
  //  .Project.Name - name of the project
  //  .Environment.Name - name of the environment.
  string namespace_template = 4;
}

message CreateResponse {}

message UpdateRequest {
  string environment_id = 1;
  repeated api.v1.environment.Update updates = 2;
}

message UpdateResponse {}

message DeleteRequest {
  string environment_id = 1;
  // Force delete all running capsules in the enviornment. If false,
  // the request will be aborted if any capsules is running in the
  // environment.
  bool force = 2;
}

message DeleteResponse {}

// Request for listing available environments.
message ListRequest {
  // Pagination options.
  model.Pagination pagination = 2;
}

// Response for listing available environments.
message ListResponse {
  // List of environments.
  repeated api.v1.environment.Environment environments = 1;
  // The version of the Rig-platform.
  string platform_version = 2;
}

message ProjectEnvironment {
  string project_id = 1;
  string environment_id = 2;
}

message ProjectEnvironmentNamespace {
  string project_id = 1;
  string environment_id = 2;
  string namespace = 3;
}

message GetNamespacesRequest {
  repeated ProjectEnvironment project_envs = 1;
}

message GetNamespacesResponse {
  repeated ProjectEnvironmentNamespace namespaces = 2;
}
