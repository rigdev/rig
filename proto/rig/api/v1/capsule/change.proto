syntax = "proto3";

package api.v1.capsule;

import "api/v1/capsule/job.proto";

// Change to a capsule that ultimately results in a new rollout.
message Change {
  // Config file change.
  message ConfigFile {
    // Path of the file in the instance.
    string path = 1;
    // Content of the config file.
    bytes content = 2;
    // True if the content is secret.
    bool is_secret = 3;
  }

  // Rollback change.
  message Rollback {
    // Rollout to roll back to.
    uint64 rollback_id = 1;
  }

  // Jobs change
  message CronJobs {
    // The jobs.
    repeated CronJob jobs = 1;
  }

  // Key-value change.
  message KeyValue {
    // Name of the property.
    string name = 1;
    // The value of the property.
    string value = 2;
  }

  // Entrypoint for the capsule instances.
  message CommandArguments {
    // Command to run.
    string command = 2;
    // arguments to the command.
    repeated string args = 3;
  }

  // Remove cron job change.
  message RemoveCronJob {
    // Name of the job to remove
    string job_name = 1;
  }

  message Annotations {
    map<string, string> annotations = 1;
  }

  message AddImage {
    string image = 1;
  }

  // Different types of changes.
  oneof field {
    // Number of replicas changed.
    uint32 replicas = 1;
    // New image change.
    string image_id = 2;
    // Network interfaces change.
    Network network = 3;
    // Container settings of the instances.
    ContainerSettings container_settings = 4;
    // Automatically add a rig-service account.
    bool auto_add_rig_service_accounts = 5;
    // Set a config file - either update or add.
    ConfigFile set_config_file = 6;
    // Path of a config file to remove.
    string remove_config_file = 7;
    // Horizontal scaling settings.
    HorizontalScale horizontal_scale = 8;
    // Rollback to a previous rollout.
    Rollback rollback = 9;
    // Update or add an environment variable.
    KeyValue set_environment_variable = 11;
    // Name of an environment variable to remove.
    string remove_environment_variable = 12;
    // Set or update an environment source.
    EnvironmentSource set_environment_source = 13;
    // Remove an environment source.
    EnvironmentSource remove_environment_source = 14;
    // Entrypoint for capsule instances.
    CommandArguments command_arguments = 15;
    // Add a cron job.
    CronJob add_cron_job = 16;
    // Remove a cron job.
    RemoveCronJob remove_cron_job = 17;
    // Add or update a network interface.
    Interface set_interface = 18;
    // Remove a network interface.
    string remove_interface = 19;
    // Set capsule annotations.
    Annotations set_annotations = 20;
    // Update or add a single capsule annotation.
    KeyValue set_annotation = 21;
    // Name of a single capsule annotation to remove.
    string remove_annotation = 22;
    // Image to deploy, adding it to images if not already present.
    AddImage add_image = 23;
  }
}

// Settings for the instance container
message ContainerSettings {
  // Environment variables.
  map<string, string> environment_variables = 1;
  // Entrypoint for the container.
  string command = 2;
  // Arguments to the container.
  repeated string args = 3;
  // Resource requests and limits.
  Resources resources = 4;
  // Environment sources.
  repeated EnvironmentSource environment_sources = 5;
}

// Container resources requests and limits
message Resources {
  // CPU and memory requests.
  ResourceList requests = 1;
  // CPU and memory limits
  ResourceList limits = 2;
  // GPU Limits
  GpuLimits gpu_limits = 3;
}

// CPU and Memory resource request or limits
message ResourceList {
  // Unit: milli-CPUs
  uint32 cpu_millis = 1;
  // Unit: Bytes
  uint64 memory_bytes = 2;
}

// GPU resource limits
message GpuLimits {
  // gpu resource type - fx. nvidia.com/gpu
  string type = 1;
  // number of gpus
  uint32 count = 2;
}

// Source of environment variables
message EnvironmentSource {
  enum Kind {
    // Unspecified.
    KIND_UNSPECIFIED = 0;
    // Environment variables from a config map.
    KIND_CONFIG_MAP = 1;
    // Environment variables from a secret.
    KIND_SECRET = 2;
  }

  // Name of the source
  string name = 1;
  // Type of the source
  Kind kind = 2;
}

// A network configuration of network interfaces.
message Network {
  // All the network interfaces.
  repeated Interface interfaces = 1;
}

// A single network interface.
message Interface {
  // Port of the interface.
  uint32 port = 1;
  // Name of the interface.
  string name = 2;
  // If public interface is enabled. Contains ingress or load balancer settings.
  PublicInterface public = 4;
  // Liveness probe.
  InterfaceProbe liveness = 7;
  // Readiness probe.
  InterfaceProbe readiness = 8;
  // Routes for the network interface.
  repeated HostRoute routes = 9;
}

message HostRoute {
  string host = 1;
  RouteOptions options = 2;
  repeated HTTPPathRoute paths = 3;
}

enum PathMatchType {
  PATH_MATCH_TYPE_UNSPECIFIED = 0;
  PATH_MATCH_TYPE_PATH_PREFIX = 1;
  PATH_MATCH_TYPE_EXACT = 2;
}

message HTTPPathRoute {
  string path = 1;
  PathMatchType match = 2;
}

message RouteOptions {
  map<string, string> annotations = 1;
}

// Probe for liveness or readiness.
message InterfaceProbe {
  // HTTP path for the probe.
  message HTTP {
    string path = 1;
  }

  // IF TCP probe.
  message TCP {}

  // GRPC service for the probe.
  message GRPC {
    string service = 1;
  }

  // Type of the proble.
  oneof kind {
    HTTP http = 1;
    TCP tcp = 2;
    GRPC grpc = 3;
  }
}

// Public interface configuration.
message PublicInterface {
  // True if the interface is public.
  bool enabled = 1;
  // Routing method - Ingress or Load Balancer.
  RoutingMethod method = 2;
}

// The routing method for the public interface.
message RoutingMethod {
  // Loadbalancer routing.
  message LoadBalancer {
    // public port.
    uint32 port = 1;
    // node port.
    uint32 node_port = 2;
  }

  // Ingress routing.
  message Ingress {
    // Hostname of the ingress.
    string host = 1;
    // True if TLS is enabled.
    bool tls = 2;
    // Paths of the ingress.
    repeated string paths = 3;
  }

  // Type of routing for the public interface.
  oneof kind {
    LoadBalancer load_balancer = 1;
    Ingress ingress = 2;
  }
}

// Horizontal scaling settings.
message HorizontalScale {
  // Maximum number of replicas.
  uint32 max_replicas = 1;
  // Minimum number of replicas.
  uint32 min_replicas = 2;
  // CPU target for autoscaling.
  CPUTarget cpu_target = 3;
  // If scaling based on custom metrics.
  repeated CustomMetric custom_metrics = 4;
}

// Autoscaling based on CPU target.
message CPUTarget {
  // Average CPU utilization target.
  uint32 average_utilization_percentage = 1;
}

// Autoscaling based on custom metrics.
message CustomMetric {
  // The type of metric.
  oneof metric {
    // If scaling based on metrics across all intstances / pods.
    InstanceMetric instance = 1;
    // If scaling based on metrics for a specific kubernetes resource object.
    ObjectMetric object = 2;
  }
}

// Metric emitted by instances / pods.
message InstanceMetric {
  // Name of the metric
  string metric_name = 1;
  // Labels of the instances to match.
  map<string, string> match_labels = 2;
  // Average value target.
  string average_value = 3;
}

// Metric emitted by kubernetes object.
message ObjectMetric {
  // Name of the metric.
  string metric_name = 1;
  // Labels of the object to match.
  map<string, string> match_labels = 2;
  // Average value target.
  string average_value = 3;
  // Value target.
  string value = 4;
  // Reference to the object.
  ObjectReference object_reference = 5;
}

// A reference to a kubernetes object.
message ObjectReference {
  // Type of object.
  string kind = 1;
  // Name of the object.
  string name = 2;
  // Api version of the object.
  string api_version = 3;
}
