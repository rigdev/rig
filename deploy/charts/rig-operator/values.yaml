# config will be rendered directly into a rig-operator config file. For more
# information about what each of the options do see the reference documentation
# at https://docs.rig.dev/api/config/v1alpha1#operatorconfig
config:
  webhooksEnabled: true
  devModeEnabled: false
  leaderElectionEnabled: true
  certManager:
    clusterIssuer: ""
    createCertificateResources: false
  service:
    type: ClusterIP
  ingress:
    annotations: {}
    className: ""
    pathType: Prefix
    disableTLS: false
  prometheusServiceMonitor:
    path: ""
    portName: ""
  pipeline:
    steps:
      - plugins:
        - name: rigdev.placement
          config: |
            nodeSelector:
              slow-worker: true
            tolerations:
            - key: "slow-worker"
              operator: "Equal"
              value: "true"
              effect: "NoSchedule"
      # - plugins: []
      # - plugins:
      #   - name: rigdev.env_mapping
      #   - name: rigdev.object_template
      #     config: |
      #       group: apps
      #       kind: Deployment
      #       object: |
      #         spec:
      #           template:
      #             spec:
      #               containers:
      #               - name: {{ .capsule.metadata.name }}
      #                 image: alpine
      #                 command: ['sh', '-c', 'echo "Hello from {{ .capsule.metadata.name }}!"']
      #   - name: rigdev.sidecar
      #     config: |
      #       container:
      #         name: foobar
      #         image: alpine
      #         command: ['sh', '-c', 'sleep 1000']
      #   - name: rigdev.init_container
      #     config: |
      #       container:
      #         name: startup
      #         image: alpine
      #         command: ['sh', '-c', 'echo "Startup!"']
      #   - name: rigdev.annotations
      #     config: |
      #       group: apps
      #       kind: Deployment
      #       annotations:
      #         some-annotation: some-value
      #         templated-annotation: value-{{ .capsule.spec.image }}
      #         deleted-annotation: ""
      #   - name: rigdev.datadog
      #     config: |
      #       libraryTag:
      #         java: latest
      #         javascript: latest
      #         python: latest
      #         net: latest
      #         ruby: latest
      #       unifiedServiceTags:
      #         env: some-env
      #         service: some-service
      #         version: some-version
      #   - name: my-name
    customPlugins: []
      # - image: some-image

replicaCount: 1

image:
  repository: ghcr.io/rigdev/rig-operator
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Refers to an existing secret containing a rig-operator config file. If left
# unset, we will generate a config based on the fields set under
# .Values.config. The secret should have a key config.yaml which contains the
# full configfile.
secretName: ""

rbac:
  # when enabled we will create all of the roles, clusterroles and accompaning
  # bindings.
  create: true
  platform:
    # If true, a rig-platform service-account and secret will be created,
    # with a service-account token for external communication of a Rig Platform.
    create_token: false
    service_account: "rig-platform-token"

# install rig CRDs, disable if you prefer having CRDs installed separately from
# the operator.
installCRDs: true

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 15000
  runAsGroup: 15000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - "ALL"

resources:
  {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

serviceMonitor:
  # toggles wether or not to create a `ServiceMonitor` resource. This requires
  # that the prometheus operator CRDs are available in the cluster.
  enabled: false
  # labels set on the `ServiceMonitor`
  labels: {}

apicheck:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 15000
    runAsGroup: 15000
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - "ALL"
  backoffLimit: 4
  serviceAccount:
    create: true
    name: ""
  timeout: 2m
  interval: 5s

certgen:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 15000
    runAsGroup: 15000
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - "ALL"
  backoffLimit: 4
  serviceAccount:
    create: true
    name: ""
  timeout: 2m
  interval: 5s

certManager:
  enabled: false
