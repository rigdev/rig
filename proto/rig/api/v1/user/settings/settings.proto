syntax = "proto3";

package api.v1.user.settings;

import "google/protobuf/duration.proto";

import "model/common.proto";
import "model/auth.proto";
import "model/credentials.proto";

// Update message for updating users settings.
message Update {
  // The allowed login mechanisms
  message LoginMechanisms {
    repeated model.LoginType login_mechanisms = 1;
  }

  // A oneof field for the different settings fields.
  oneof field {
    // If true, users can self register.
    bool allow_register = 1;
    // If true, users must be verified via email to login.
    bool is_verified_email_required = 2;
    // If true, users must be verified via phone to login.
    bool is_verified_phone_required = 3;
    // Access token Time to Live.
    google.protobuf.Duration access_token_ttl = 4;
    // Refresh token Time to Live.
    google.protobuf.Duration refresh_token_ttl = 5;
    // Verification code Time to Live.
    google.protobuf.Duration verification_code_ttl = 6;
    // The hashing config used to hash passwords.
    model.HashingConfig password_hashing = 7;
    // The allowed login mechanisms.
    LoginMechanisms login_mechanisms = 8;
    // The email provider.
    EmailProvider email_provider = 9;
    // The text provider.
    TextProvider text_provider = 10;
    // The templates used for sending emails and texts.
    Template template = 11;
  }
}

// Message that tells how the user was registered / created.
message RegisterMethod {
  // The user was created by the system.
  message System {}

  // The user was self-registered with a login-type.
  message Signup {
    // The login type used to register.
    model.LoginType login_type = 1;
  }

  // The method used to register a user.
  oneof method {
    // The user was created by the system.
    System system = 1;
    // The user was self-registered with a login-type.
    Signup signup = 2;
  }
}

// Message that tells how the user was authenticated.
message AuthMethod {
  oneof method {
    model.LoginType login_type = 1;
  }
}

// The users settings configuration. Settings of everything that has to do with
// users.
message Settings {
  // If true, users can self register.
  bool allow_register = 1;
  // If true, users must be verified via email to login.
  bool is_verified_email_required = 2;
  // Deprecated: Text is not supported - If true, users must be verified via
  // phone to login.
  bool is_verified_phone_required = 3;
  // Access token Time to Live.
  google.protobuf.Duration access_token_ttl = 4;
  // Refresh token Time to Live.
  google.protobuf.Duration refresh_token_ttl = 5;
  // Verification code Time to Live.
  google.protobuf.Duration verification_code_ttl = 6;
  // The hashing config used to hash passwords.
  model.HashingConfig password_hashing = 7;
  // The allowed login mechanisms.
  repeated model.LoginType login_mechanisms = 8;
  // If true, send a welcome email to new users.
  bool send_welcome_mail = 10;
  // The email provider.
  EmailProviderEntry email_provider = 11;
  // Deprecated: Text is not supported - The text provider.
  TextProviderEntry text_provider = 12;
  // The templates used for sending emails and texts.
  Templates templates = 13;
}

// The different template types.
enum TemplateType {
  // Unspecified template type.
  TEMPLATE_TYPE_UNSPECIFIED = 0;
  // The welcome email template.
  TEMPLATE_TYPE_WELCOME_EMAIL = 1;
  // The email verification template.
  TEMPLATE_TYPE_EMAIL_VERIFICATION = 2;
  // The reset password email template.
  TEMPLATE_TYPE_EMAIL_RESET_PASSWORD = 3;
  TEMPLATE_TYPE_WELCOME_TEXT =
      4;  // Deprecated: Text is not supported - The welcome text template.
          // Deprecated: Text is not supported - The text verification template.
  TEMPLATE_TYPE_TEXT_VERIFICATION = 5;
  // Deprecated: Text is not supported - The reset password text template.
  TEMPLATE_TYPE_TEXT_RESET_PASSWORD = 6;
}

// Default email provider instance.
message DefaultInstance {}

// Mailjet email rpvoider instance.
message MailjetInstance {}

// Deprecated: Text is not supported - Default text provider instance.
message TwilioInstance {}

// SMTP email provider instance.
message SmtpInstance {
  // Host of the smtp server.
  string host = 1;
  // Port of the smtp server.
  int64 port = 2;
}

// Type of email instance in a provider.
message EmailInstance {
  oneof instance {
    // default from platform config.
    DefaultInstance default = 1;
    // Mailjet instance.
    MailjetInstance mailjet = 2;
    SmtpInstance smtp = 3;  // SMTP instance.
  }
}

// Deprecated: Text is not supported - Type of text instance in a provider.
message TextInstance {
  oneof instance {
    // default from platform config.
    DefaultInstance default = 1;
    // Twilio instance.
    TwilioInstance twilio = 2;
  }
}

// The email provider.
message EmailProvider {
  // The email-address that the provider sends emails from.
  string from = 1;
  // The credentials for the provider.
  model.ProviderCredentials credentials = 2;
  // The instance of the provider.
  EmailInstance instance = 3;
}

// an entry model for the email provider.
message EmailProviderEntry {
  // The email-address that the provider sends emails from.
  string from = 1;
  // The client id for the provider.
  string client_id = 2;
  // The secret id for the provider.
  string secret_id = 3;
  // The instance of the provider.
  EmailInstance instance = 4;
}

// Deprecated: Text is not supported - The text provider.
message TextProvider {
  // The phone number that the provider sends texts from.
  string from = 1;
  // The credentials for the provider.
  model.ProviderCredentials credentials = 2;
  TextInstance instance = 3;  // The instance of the provider.
}

// Deprecated: Text is not supported - An entry model for the text provider.
message TextProviderEntry {
  // The phone number that the provider sends texts from.
  string from = 1;
  // The client id for the provider.
  string client_id = 2;
  // The secret id for the provider.
  string secret_id = 3;
  // The instance of the provider.
  TextInstance instance = 4;
}

// A generic template model for sending emails and texts.
message Template {
  // The body of the template.
  string body = 1;
  // The subject of the template.
  string subject = 2;
  // The type of the template.
  TemplateType type = 3;
  // The format of the template.
  repeated string format = 4;
}

message Templates {
  // The welcome email template.
  Template welcome_email = 1;
  // Deprecated: Text is not supported - The welcome text template.
  Template welcome_text = 2;
  // The reset password email template.
  Template reset_password_email = 3;
  // Deprecated: Text is not supported - The reset password text template.
  Template reset_password_text = 4;
  // The email verification template.
  Template verify_email = 5;
  // Deprecated: Text is not supported - The text verification template.
  Template verify_phone_number = 6;
}
