syntax = "proto3";

package model;

// Bcrypt hashing configuration.
message BcryptHashingConfig {
  // The cost of the hashing algorithm.
  int32 cost = 1;
}

// Bcrypt hashing instance.
message BcryptHashingInstance {}

// Scrypt hashing configuration.
message ScryptHashingConfig {
  // The key used to sign the salt.
  string signer_key = 1;
  // The salt separator.
  string salt_separator = 2;
  // The number of rounds in the algorithm.
  int32 rounds = 3;
  // The memory cost of the algorithm.
  int32 mem_cost = 4;
  // The parallelization factor of the algorithm.
  int32 p = 5;
  // The length of the key.
  int32 key_len = 6;
}

// Scrypt hashing instance.
message ScryptHashingInstance {
  // The salt used to hash the password.
  bytes salt = 1;
}

// Hashing configuration.
message HashingConfig {
  oneof method {
    // if bcrypt is set, use bcrypt.
    BcryptHashingConfig bcrypt = 1;
    // if scrypt is set, use scrypt.
    ScryptHashingConfig scrypt = 2;
  }
}

// Hashing instance.
message HashingInstance {
  // The hashing configuration.
  HashingConfig config = 1;
  // A hash
  bytes hash = 2;
  oneof instance {
    // if bcrypt is set, this bcrypt instance was used.
    BcryptHashingInstance bcrypt = 3;
    // if scrypt is set, this scrypt instance was used.
    ScryptHashingInstance scrypt = 4;
  }
}

// Pagination option.
message Pagination {
  // Where to start the pagination.
  uint32 offset = 1;
  // How many items to return.
  uint32 limit = 2;
  // Whether to sort in descending order.
  bool descending = 3;
}
