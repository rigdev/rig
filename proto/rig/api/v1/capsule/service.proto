syntax = "proto3";

package api.v1.capsule;

import "api/v1/capsule/capsule.proto";
import "api/v1/capsule/log.proto";
import "api/v1/capsule/instance.proto";
import "api/v1/capsule/rollout.proto";
import "api/v1/capsule/instance/status.proto";
import "api/v1/capsule/event.proto";
import "api/v1/capsule/job.proto";
import "api/v1/capsule/field.proto";
import "model/metrics.proto";
import "api/v1/capsule/change.proto";
import "api/v1/capsule/status.proto";
import "api/v1/capsule/revision.proto";
import "model/common.proto";
import "model/revision.proto";
import "model/git.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "api/v1/capsule/pipeline/status.proto";

// The service to manage capsules.
service Service {
  // Create a new capsule.
  rpc Create(CreateRequest) returns (CreateResponse) {}
  // Get a capsule by id.
  rpc Get(GetRequest) returns (GetResponse) {}
  // Delete a capsule.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  // Logs returns (and streams) the log output of a capsule.
  rpc Logs(LogsRequest) returns (stream LogsResponse) {}
  // Update a capsule.
  rpc Update(UpdateRequest) returns (UpdateResponse) {}
  // Lists all capsules for current project.
  rpc List(ListRequest) returns (ListResponse) {}
  // Deploy changes to a capsule.
  // When deploying, a new rollout will be initiated. Only one rollout can be
  // running at a single point in time.
  // Use `Abort` to abort an already running rollout.
  rpc Deploy(DeployRequest) returns (DeployResponse) {}
  rpc DeploySet(DeploySetRequest) returns (DeploySetResponse) {}
  rpc ProposeRollout(ProposeRolloutRequest) returns (ProposeRolloutResponse) {}
  rpc ProposeSetRollout(ProposeSetRolloutRequest)
      returns (ProposeSetRolloutResponse) {}
  rpc ListProposals(ListProposalsRequest) returns (ListProposalsResponse) {}
  rpc ListSetProposals(ListSetProposalsRequest)
      returns (ListSetProposalsResponse) {}
  // Lists all instances for the capsule.
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse) {}
  // Restart a single capsule instance.
  rpc RestartInstance(RestartInstanceRequest)
      returns (RestartInstanceResponse) {}
  // Get a single rollout by ID.
  rpc GetRollout(GetRolloutRequest) returns (GetRolloutResponse) {}
  // Lists all rollouts for the capsule.
  rpc ListRollouts(ListRolloutsRequest) returns (ListRolloutsResponse) {}
  // Stream rollouts for a capsule.
  rpc WatchRollouts(WatchRolloutsRequest)
      returns (stream WatchRolloutsResponse) {}
  // Abort the rollout.
  rpc AbortRollout(AbortRolloutRequest) returns (AbortRolloutResponse) {}
  // Stop a Rollout, removing all resources associated with it.
  rpc StopRollout(StopRolloutRequest) returns (StopRolloutResponse) {}
  // List capsule events.
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
  // Get metrics for a capsule
  rpc CapsuleMetrics(CapsuleMetricsRequest) returns (CapsuleMetricsResponse) {}
  // GetInstanceStatus returns the current status for the given instance.
  rpc GetInstanceStatus(GetInstanceStatusRequest)
      returns (GetInstanceStatusResponse) {}
  // ListInstanceStatuses lists the status of all instances.
  rpc ListInstanceStatuses(ListInstanceStatusesRequest)
      returns (ListInstanceStatusesResponse) {}

  // Stream Instance Statuses of a capsule.
  rpc WatchInstanceStatuses(WatchInstanceStatusesRequest)
      returns (stream WatchInstanceStatusesResponse) {}

  // Execute executes a command in a given in instance,
  // and returns the output along with an exit code.
  rpc Execute(stream ExecuteRequest) returns (stream ExecuteResponse) {}
  // PortForward establishes a port-forwarding for the port to the given
  // instance.
  rpc PortForward(stream PortForwardRequest)
      returns (stream PortForwardResponse) {}

  rpc GetCustomInstanceMetrics(GetCustomInstanceMetricsRequest)
      returns (GetCustomInstanceMetricsResponse) {}

  // Get list of job executions performed by the Capsule.
  rpc GetJobExecutions(GetJobExecutionsRequest)
      returns (GetJobExecutionsResponse) {}

  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
  rpc GetRevision(GetRevisionRequest) returns (GetRevisionResponse) {}
  rpc GetRolloutOfRevisions(GetRolloutOfRevisionsRequest)
      returns (GetRolloutOfRevisionsResponse) {}

  // Stream the status of a capsule.
  rpc WatchStatus(WatchStatusRequest) returns (stream WatchStatusResponse) {}

  rpc GetEffectiveGitSettings(GetEffectiveGitSettingsRequest)
      returns (GetEffectiveGitSettingsResponse) {}

  // Will initiate the pipeline, from the initial environment and it's current
  // rollout.
  rpc StartPipeline(StartPipelineRequest) returns (StartPipelineResponse) {}
  rpc GetPipelineStatus(GetPipelineStatusRequest)
      returns (GetPipelineStatusResponse) {}
  // Progress the pipeline to the next environment.
  rpc ProgressPipeline(ProgressPipelineRequest)
      returns (ProgressPipelineResponse) {}
  // Abort the pipeline execution. This will stop the pipeline from any further
  // promotions.
  rpc AbortPipeline(AbortPipelineRequest) returns (AbortPipelineResponse) {}
  rpc ListPipelineStatuses(ListPipelineStatusesRequest)
      returns (ListPipelineStatusesResponse) {}
}

message ListPipelineStatusesRequest {
  model.Pagination pagination = 1;
  // Only include pipelines that are run in the given project.
  string project_filter = 2;
  // Only include pipelines that are run with the given capsule.
  string capsule_filter = 3;
  // Only include pipelines that are in one of the given states.
  repeated api.v1.capsule.pipeline.State states_filter = 4;
  // Only include pipelines that have the given name.
  string name_filter = 5;
}

message ListPipelineStatusesResponse {
  repeated api.v1.capsule.pipeline.Status statuses = 1;
}

message AbortPipelineRequest {
  uint64 execution_id = 1;
}

message AbortPipelineResponse {
  api.v1.capsule.pipeline.Status status = 1;
}

message ProgressPipelineRequest {
  uint64 execution_id = 1;
  // If true, the progression will not be executed, but instead a
  // breakdown of changes will be returned
  bool dry_run = 2;
}

message ProgressPipelineResponse {
  api.v1.capsule.pipeline.Status status = 1;
  // Breakdown of the changes that this deploy would make to the system.
  // Only populated if dry-run is used.
  DeployOutcome outcome = 2;
}

message GetPipelineStatusRequest {
  uint64 execution_id = 1;
}

message GetPipelineStatusResponse {
  api.v1.capsule.pipeline.Status status = 1;
}

message StartPipelineRequest {
  string project_id = 1;
  string capsule_id = 2;
  string pipeline_name = 3;
}

message StartPipelineResponse {
  api.v1.capsule.pipeline.Status status = 1;
}

message WatchRolloutsRequest {
  // The capsule to list rollouts for.
  string capsule_id = 1;
  // The project in which the capsule lives.
  string project_id = 2;
  // The environment to list rollouts for.
  string environment_id = 3;
  // If given only the rollout with this ID will be watched.
  uint64 rollout_id = 4;
  // Pagination options.
  model.Pagination pagination = 5;
}

message WatchRolloutsResponse {
  api.v1.capsule.Rollout updated = 1;
}

message WatchInstanceStatusesRequest {
  // The capsule to get the instance statuses from.
  string capsule_id = 1;
  // The project in which the capsule is.
  string project_id = 2;
  // The environment to get the instance statuses from.
  string environment_id = 3;
  // If given, only the instance with this ID will be watched.
  string instance_id = 4;
  // if true, deleted instances will be included in the response.
  bool include_deleted = 5;
  // if true, existing instances will be excluded from the response.
  bool exclude_existing = 6;
  // Pagination options.
  model.Pagination pagination = 7;
}

message WatchInstanceStatusesResponse {
  oneof response {
    api.v1.capsule.instance.Status updated = 1;
    string deleted = 2;
  }
}

message WatchStatusRequest {
  // The capsule to watch the status of.
  string capsule_id = 1;
  // The project in which the capsule lives.
  string project_id = 2;
  // The environment to watch the status of.
  string environment_id = 3;
}

message WatchStatusResponse {
  api.v1.capsule.Status status = 1;
}

// GetStatusRequest is a request to start streaming the capsule status
message GetStatusRequest {
  // The capsule to get the status from.
  string capsule_id = 1;
  // The project in which the capsule lives.
  string project_id = 2;
  // The environment to get the status from.
  string environment_id = 3;
}

// GetCapsuleStatusResponse
message GetStatusResponse {
  // The capsule status
  api.v1.capsule.Status status = 1;
}

// StreamData for Execute RPC.
message StreamData {
  // Stream data.
  bytes data = 1;
  // If the stream is closed.
  bool closed = 2;
}

// Execute request. This can either be a request to start a request, a terminal
// resize msg or a stream data msg.
message ExecuteRequest {
  // Exec start request
  message Start {
    // The capsule to execute in.
    string capsule_id = 1;
    // The instance to execute in.
    string instance_id = 2;
    // The command to execute.
    string command = 3;
    // The arguments to the command.
    repeated string arguments = 4;
    // The initial terminal size.
    Resize tty = 5;
    // If the command is interactive.
    bool interactive = 6;
  }

  // Terminal resize request.
  message Resize {
    // The new terminal height.
    uint32 height = 1;
    // The new terminal width.
    uint32 width = 2;
  }

  oneof request {
    // Start request.
    Start start = 1;
    // Stream stdin request
    StreamData stdin = 2;
    // Resize request
    Resize resize = 3;
  }

  // The project ID.
  string project_id = 4;
  // The environment ID.
  string environment_id = 5;
}

// Execute response.
message ExecuteResponse {
  oneof response {
    // Stdout of the execute.
    StreamData stdout = 1;
    // Stderr in case of an error.
    StreamData stderr = 2;
    // Exit code of the execute.
    int32 exit_code = 3;
  }
}

message PortForwardRequest {
  message Start {
    // The project ID.
    string project_id = 1;
    // The environment ID.
    string environment_id = 2;
    string capsule_id = 3;
    string instance_id = 4;
    uint32 port = 5;
  }

  message Close {}

  oneof request {
    Start start = 1;
    bytes data = 2;
    Close close = 3;
  }
}

message PortForwardResponse {
  message Close {}

  oneof response {
    bytes data = 1;
    Close close = 2;
  }
}

// Create capsule request.
message CreateRequest {
  // The name of the capsule. This property must be unique for a project and
  // cannot be changed after creation. Resources created in associating with the
  // capsule will use this name.
  string name = 1;
  // Deprecated field: The initial properties of the capsule.
  repeated api.v1.capsule.Update initializers = 2;
  // The project to create the capsule in.
  string project_id = 3;
}

// Create capsule response.
message CreateResponse {
  // ID of the capsule. This is the same as the name.
  string capsule_id = 1;
}

// Request to get a capsule.
message GetRequest {
  // Capsule to get.
  string capsule_id = 1;
  // Project in which the capsule is.
  string project_id = 2;
}

// Response to get a capsule.
message GetResponse {
  // The capsule.
  api.v1.capsule.Capsule capsule = 1;
  api.v1.capsule.SetRevision revision = 2;
  map<string, api.v1.capsule.Revision> environment_revisions = 3;
}

// Request to delete a capsule.
message DeleteRequest {
  // The capsule to delete.
  string capsule_id = 1;
  // The project in which the capsule is to be deleted.
  string project_id = 2;
}

// Empty delete response.
message DeleteResponse {}

// Request to get instance logs from a capsule.
message LogsRequest {
  // The capsule to read logs from.
  string capsule_id = 1;
  // The instance in the capsule to read logs from.
  string instance_id = 2;
  // If true, the request will stay open and stream new log messages.
  bool follow = 3;
  // If set, will not show logs older than since.
  google.protobuf.Duration since = 4;
  // The project in which the capsule is.
  string project_id = 5;
  // Environment to get logs from.
  string environment_id = 6;
  // If true, include logs from previously terminated containers
  bool previous_containers = 7;
}

// The response of a capsule.Logs RPC
message LogsResponse {
  // The actual logs
  api.v1.capsule.Log log = 1;
}

// Deprecated update - This is now a no-op
message UpdateRequest {
  // The capsule to update.
  string capsule_id = 1;
  // The updates to apply to the capsule.
  repeated api.v1.capsule.Update updates = 2;
  string project_id = 3;
}

// Deprecated: Empty update response.
message UpdateResponse {}

// List capsule request.
message ListRequest {
  // Pagination options.
  model.Pagination pagination = 2;
  // Project in which to list capsules.
  string project_id = 3;
}

// List capsule response.
message ListResponse {
  // The capsules.
  repeated api.v1.capsule.Capsule capsules = 1;
  // Total number of capsules in the project.
  uint64 total = 2;
}

// Deploy request. This will deploy a number of changes which results in a new
// rollout.
message DeployRequest {
  // Capsule to deploy to.
  string capsule_id = 1;
  // Changes to include in the new rollout.
  repeated api.v1.capsule.Change changes = 2;
  // Force deploy, aborting an existing rollout if ongoing.
  bool force = 3;
  // Project in which the capsule lives.
  string project_id = 4;
  // Environment in which to deploy.
  string environment_id = 5;
  // Deploy message.
  string message = 6;
  // if true, the deploy will not be executed, but the request will return the
  // rollout config.
  bool dry_run = 7;

  // If not zero, this will constrain the rollout only to be created if the
  // currently running rollout matches this identifier. If this check fails, the
  // request will return an `Aborted` error.
  uint64 current_rollout_id = 8;

  // If set, this will constrain the rollout only to be created if the current
  // latest capsule fingerprint matches the given.
  // Cannot be used together with `current_rollout_id`
  model.Fingerprint current_fingerprint = 10;

  // By default, existing objects will be kept in favor of overriding them. To
  // force the override of resources, set this flag to true. An example of this
  // use-case is a migration step, where resource created by a previous
  // toolchain e.g. based on Helm charts, are to be replaced and instead be
  // created by the Rig operator.
  // While the override is irreversible, this flag is not "sticky" and must be
  // set by each deploy that should use this behavior.
  bool force_override = 9;
}

// Deploy response.
message DeployResponse {
  reserved 3;
  // ID of the new rollout.
  uint64 rollout_id = 1;
  // The YAML of the resources that will be deployed.
  // Deprecated. Use `outcome` instead.
  map<string, string> resource_yaml = 2;
  // The rollout config.
  // api.v1.capsule.RolloutConfig rollout_config = 3;
  // The capsule revision created.
  Revision revision = 4;
  // The capsule set revision created if it's the first time deploying to the
  // environment.
  SetRevision set_revision = 6;
  // Breakdown of the changes that this deploy would make to the system.
  // Only populated if dry-run is used.
  DeployOutcome outcome = 5;
}

message DeployOutcome {
  message PlatformObject {
    string name = 1;
    string content_yaml = 2;
  }

  message KubernetesObject {
    string name = 1;
    string content_yaml = 2;
  }

  // The field-level changes that comes from applying this change.
  repeated api.v1.capsule.FieldChange field_changes = 1;
  // The Platform-level objects that are generated by the Deploy.
  repeated PlatformObject platform_objects = 2;
  // The Kubernetes-level objects that are generated by the Deploy.
  // The objects are both the outcome of what the platform generated for
  // the Kubernetes cluster directly and what plugins are further adding.
  repeated KubernetesObject kubernetes_objects = 3;
  // In case generation of kubernetes files failed, this field will
  // be populated with the error.
  string kubernetes_error = 4;

  string cluster_name = 5;
  string kubernetes_namespace = 6;
}

message DeploySetRequest {
  // Capsule to deploy to.
  string capsule_id = 1;
  // Changes to include in the new rollout.
  repeated api.v1.capsule.Change changes = 2;
  // Force deploy, aborting existing rollouts if ongoing.
  bool force = 3;
  // Project in which the capsule lives.
  string project_id = 4;
  // Deploy message.
  string message = 6;
  // if true, the deploy will not be executed, but the request will return the
  // rollout config.
  bool dry_run = 7;

  // If present, maps from environment to expected current rollout within that
  // environment. This will constrain the rollout only to be created if the
  // currently running rollout matches this identifier. If this check fails, the
  // request will return an `Aborted` error.
  map<string, uint64> current_rollout_ids = 8;

  // If set, this will constrain the rollout only to be created if the current
  // latest capsuleset fingerprint matches the given.
  model.Fingerprint current_fingerprint = 9;

  // If set, this will constrain the rollout only to be created if the current
  // latest capsule fingerprint for each environment in the map matches the ones
  // in the map. Cannot be used together with `current_rollout_ids`
  map<string, model.Fingerprint> current_environment_fingerprints = 10;
}

message DeploySetOutcome {
  // The field-level changes that comes from applying this change.
  repeated api.v1.capsule.FieldChange field_changes = 1;
  map<string, DeployOutcome> environments = 2;
}

message DeploySetResponse {
  // The capsule revision created.
  SetRevision revision = 1;
  // Breakdown of the changes that this deploy would make to the system.
  // Only populated if dry-run is used.
  DeploySetOutcome outcome = 2;
  // The environments which currently have rollouts. These will receive a
  // rollout as result of the SetDeploy
  repeated string ActiveEnvironments = 3;
}

// Deploy request. This will deploy a number of changes which results in a new
// rollout.
message ProposeRolloutRequest {
  // Capsule to deploy to.
  string capsule_id = 1;
  // Changes to include in the new rollout.
  repeated api.v1.capsule.Change changes = 2;
  // Project in which the capsule lives.
  string project_id = 3;
  // Environment in which to deploy.
  string environment_id = 4;
  // Deploy message.
  string message = 5;

  // By default, existing objects will be kept in favor of overriding them. To
  // force the override of resources, set this flag to true. An example of this
  // use-case is a migration step, where resource created by a previous
  // toolchain e.g. based on Helm charts, are to be replaced and instead be
  // created by the Rig operator.
  // While the override is irreversible, this flag is not "sticky" and must be
  // set by each deploy that should use this behavior.
  bool force_override = 6;

  string branch_name = 7;
}

message ProposeRolloutResponse {
  Proposal proposal = 1;
  // Breakdown of the changes that this deploy would make to the system.
  DeployOutcome outcome = 2;
}

message ProposeSetRolloutRequest {
  // Capsule to deploy to.
  string capsule_id = 1;
  // Changes to include in the new rollout.
  repeated api.v1.capsule.Change changes = 2;
  // Project in which the capsule lives.
  string project_id = 3;
  // Deploy message.
  string message = 4;

  // By default, existing objects will be kept in favor of overriding them. To
  // force the override of resources, set this flag to true. An example of this
  // use-case is a migration step, where resource created by a previous
  // toolchain e.g. based on Helm charts, are to be replaced and instead be
  // created by the Rig operator.
  // While the override is irreversible, this flag is not "sticky" and must be
  // set by each deploy that should use this behavior.
  bool force_override = 5;

  string branch_name = 6;
}

message ProposeSetRolloutResponse {
  SetProposal proposal = 1;
  // Breakdown of the changes that this deploy would make to the system.
  DeploySetOutcome outcome = 2;
}

message ListProposalsRequest {
  string project_id = 1;
  string environment_id = 2;
  string capsule_id = 3;
  model.Pagination pagination = 4;
}

message ListProposalsResponse {
  repeated Proposal proposals = 1;
  uint64 total = 2;
}

message ListSetProposalsRequest {
  string project_id = 1;
  string capsule_id = 2;
  model.Pagination pagination = 3;
}

message ListSetProposalsResponse {
  repeated SetProposal proposals = 1;
  uint64 total = 2;
}

// List instances request.
message ListInstancesRequest {
  // Capsule to list instances from.
  string capsule_id = 1;
  // Pagination options.
  model.Pagination pagination = 2;
  // Project in which the capsule lives.
  string project_id = 3;
  // Environment to list instances from.
  string environment_id = 4;
  // if true, deleted instances will be included in the response.
  bool include_deleted = 5;
  // if true, existing instances will be excluded from the response.
  bool exclude_existing = 6;
}

// List instances response.
message ListInstancesResponse {
  // The instances.
  repeated api.v1.capsule.Instance instances = 1;
  // Total number of instances in the capsule for the given environment.
  uint64 total = 2;
}

// Get status of an instance.
message GetInstanceStatusRequest {
  // The capsule to get the instance status from.
  string capsule_id = 1;
  // The instance to get.
  string instance_id = 2;
  // The project in which the capsule lives.
  string project_id = 3;
  // The environment to get the instance from.
  string environment_id = 4;
}

// Get instance status response.
message GetInstanceStatusResponse {
  // The instance status.
  api.v1.capsule.instance.Status status = 1;
}

// List multiple instance statuses
message ListInstanceStatusesRequest {
  // The capsule to get the instance statuses from.
  string capsule_id = 1;
  // Pagination options.
  model.Pagination pagination = 2;
  // The project in which the capsule is.
  string project_id = 3;
  // The environment to get the instance statuses from.
  string environment_id = 4;
  // if true, deleted instances will be included in the response.
  bool include_deleted = 5;
  // if true, existing instances will be excluded from the response.
  bool exclude_existing = 6;
}

// Response for listing multiple instance statuses
message ListInstanceStatusesResponse {
  // The instance statuses.
  repeated api.v1.capsule.instance.Status instances = 1;
  // Total number of instances in the capsule for the given environment.
  uint64 total = 2;
}

// RestartInstanceRequest restarts a single instance.
message RestartInstanceRequest {
  // The capsule to restart the instance in.
  string capsule_id = 1;
  // The instance to restart.
  string instance_id = 2;
  // The project in which the capsule lives.
  string project_id = 3;
  // The environment to restart the instance in.
  string environment_id = 4;
}

// RestartInstanceResponse is an empty response.
message RestartInstanceResponse {}

// ListRolloutsRequest lists rollouts for a capsule.
message ListRolloutsRequest {
  // The capsule to list rollouts for.
  string capsule_id = 1;
  // Pagination options.
  model.Pagination pagination = 2;
  // The project in which the capsule lives.
  string project_id = 3;
  // The environment to list rollouts for.
  string environment_id = 4;
}

// ListRolloutsResponse lists rollouts for a capsule and an environment.
message ListRolloutsResponse {
  // The rollouts.
  repeated api.v1.capsule.Rollout rollouts = 1;
  // Total number of rollouts in the capsule for the given environment.
  uint64 total = 2;
}

// GetRolloutRequest gets a single rollout.
message GetRolloutRequest {
  // The capsule to get the rollout from.
  string capsule_id = 1;
  // The rollout to get.
  uint64 rollout_id = 2;
  string project_id = 3;  // The project in which the capsule lives.
}

// GetRolloutResponse returns a single rollout for a capsule and an environment
// in a project.
message GetRolloutResponse {
  // The rollout.
  api.v1.capsule.Rollout rollout = 1;
}

// AbortRolloutRequest aborts a rollout.
message AbortRolloutRequest {
  // The capsule to abort the rollout in.
  string capsule_id = 1;
  // The rollout to abort.
  uint64 rollout_id = 2;
  // The project in which the capsule lives.
  string project_id = 3;
}

// AbortRolloutResponse is an empty response.
message AbortRolloutResponse {}

// StopRolloutRequest aborts a rollout.
message StopRolloutRequest {
  // The capsule of the aborting rollout.
  string capsule_id = 1;
  // The rollout to stop.
  uint64 rollout_id = 2;
  // The project in which the capsule lives.
  string project_id = 3;
}

// StopRolloutResponse is an empty response.
message StopRolloutResponse {}

// ListEvents request for listing rollout events for a given rollout in a
// capsule and environment.
message ListEventsRequest {
  // The capsule to list events for.
  string capsule_id = 1;
  // The rollout to list events for.
  uint64 rollout_id = 2;
  // Pagination options.
  model.Pagination pagination = 3;
  // The project in which the capsule lives.
  string project_id = 4;
  // The environment to list events for.
  string environment_id = 5;
}

// Response to List Events
message ListEventsResponse {
  // The events for a rollout in a capsule and environment for a given project.
  repeated api.v1.capsule.Event events = 1;
  // Total number of events in the capsule for the given environment.
  uint64 total = 2;
}

// Request for getting metrics for a capsule and optionally a single instance.
message CapsuleMetricsRequest {
  // The capsule to get metrics for.
  string capsule_id = 1;
  // If set, only returns metrics for the given instance_id.
  string instance_id = 2;
  // The project in which the capsule lives.
  string project_id = 4;
  // The environment to get metrics for.
  string environment_id = 5;
  // Return metrics generated after 'since'
  google.protobuf.Timestamp since = 6;
}

// Response to getting capsule metrics.
message CapsuleMetricsResponse {
  // Metrics
  repeated model.InstanceMetrics instance_metrics = 1;
}

// Request for getting custom metrics for a capsule in an environment.
message GetCustomInstanceMetricsRequest {
  // The capsule to get metrics for.
  string capsule_id = 1;
  // The project in which the capsule lives.
  string project_id = 2;
  // The environment to get metrics for.
  string environment_id = 3;
}

// Response to getting custom metrics for a capsule in an environment.
message GetCustomInstanceMetricsResponse {
  // Custom Metrics.
  repeated model.Metric metrics = 1;
}

// Request for getting job executions from cron jobs.
message GetJobExecutionsRequest {
  // The capsule to get job executions for.
  string capsule_id = 1;
  // The name of the job to get executions for.
  string job_name = 2;
  // Filtering executions by job state.
  repeated JobState states = 4;
  // Filtering executions created before this timestamp.
  google.protobuf.Timestamp created_from = 5;
  // Filtering executions created after this timestamp.
  google.protobuf.Timestamp created_to = 6;
  // Pagination options.
  model.Pagination pagination = 7;
  // The project in which the capsule lives.
  string project_id = 8;
  // The environment to get job executions for.
  string environment_id = 9;
}

// Response to getting job executions.
message GetJobExecutionsResponse {
  // Job executions.
  repeated JobExecution job_executions = 1;
  // Total number of executions ignorring pagination.
  uint64 total = 2;
}

message GetRevisionRequest {
  string project_id = 1;
  string environment_id = 2;
  string capsule_id = 3;
  model.Fingerprint fingerprint = 4;
}

message GetRevisionResponse {
  Revision revision = 1;
}

message GetRolloutOfRevisionsRequest {
  string project_id = 1;
  string environment_id = 2;
  string capsule_id = 3;
  model.Fingerprints fingerprints = 4;
}

message GetRolloutOfRevisionsResponse {
  message NoRollout {
    // Indicates no rollout with a project revision at least as new as the one
    // given.
    bool project = 1;
    // Indicates no rollout with an environment revision at least as new as the
    // one given.
    bool environment = 2;
    // Indicates no rollout with a capsule set revision at least as new as the
    // one given.
    bool capsule_set = 3;
    // Indicates no rollout with a capsule revision at least as new as the one
    // given.
    bool capsule = 4;
  }

  oneof kind {
    NoRollout no_rollout = 1;
    Rollout rollout = 2;
  }
}

message GetEffectiveGitSettingsRequest {
  string project_id = 1;
  string environment_id = 2;
  string capsule_id = 3;
}

message GetEffectiveGitSettingsResponse {
  model.GitStore git = 1;
  bool environment_enabled = 2;
}
