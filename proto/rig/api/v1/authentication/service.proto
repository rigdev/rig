syntax = "proto3";

package api.v1.authentication;

import "api/v1/authentication/user.proto";
import "model/auth.proto";
import "model/user.proto";

// The service to manage public endpoints in Users
service Service {
  // Login authenticats a user and returns a access/refresh token
  rpc Login(LoginRequest) returns (LoginResponse) {}
  // Logout validates the access token and blocks it afterwards
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  // Get the logged in user
  rpc Get(GetRequest) returns (GetResponse) {}
  // Register creates a new user
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  // Send reset password email to the user
  rpc SendPasswordReset(SendPasswordResetRequest)
      returns (SendPasswordResetResponse) {}
  // Reset password of the user
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {}
  // Delete logged in user
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  // Refresh logged in token pair
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {}
  // Get auth config for how available login methods
  rpc GetAuthConfig(GetAuthConfigRequest) returns (GetAuthConfigResponse) {}
  // Verify email
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {}
  // Verify phone number
  rpc VerifyPhoneNumber(VerifyPhoneNumberRequest)
      returns (VerifyPhoneNumberResponse) {}
  rpc SendVerificationEmail(SendVerificationEmailRequest)
      returns (SendVerificationEmailResponse) {}
}

// Request to send an email containing the code for the email verification flow.
// This is an upsert, and will invalidate the current verification-code if it
// exists. Only possible if an email-provider is configured, and the user has en
// email.
message SendVerificationEmailRequest {
  // User identifier of the user.
  model.UserIdentifier identifier = 1;
}

// Empty response for sending a verification email
message SendVerificationEmailResponse {
  // JWT token to verify the email.
  string token = 1;
}

// Request to verify the email of a user with a verification code sent to the
// email.
message VerifyEmailRequest {
  // The verification code.
  string code = 1;
  // The email of the user.
  string email = 2;
  // JWT token to verify the email.
  string token = 3;
}

// Empty response to the Verify Email Request.
message VerifyEmailResponse {}

// Request to verify the phone number of a user with a verification code sent to
// the phone number.
message VerifyPhoneNumberRequest {
  string code = 1;
  string phone_number = 2;
}

// Empty response to the Verify Phone Number Request.
message VerifyPhoneNumberResponse {}

// Login request with either user identifier & email or client credentials.
message LoginRequest {
  oneof method {
    // User identifier & password.
    authentication.UserPassword user_password = 1;
    // Client credentials from service account.
    authentication.ClientCredentials client_credentials = 3;
  }
}

// Login response with tokens and user information.
message LoginResponse {
  // The access token and refresh token.
  authentication.Token token = 1;
  // ID of the user.
  string user_id = 2;
  // User information.
  model.UserInfo user_info = 3;
}

// Empty logout request. The user ID etc. is taken from the token.
message LogoutRequest {}

// Empty response to the logout request.
message LogoutResponse {}

// Get request to get the logged in user. The user ID etc. is taken from the
// token.
message GetRequest {}

// Response with user information to the get request.
message GetResponse {
  // Information about the user.
  model.UserInfo user_info = 1;
  // ID of the user
  string user_id = 2;
}

// Register request for users to self-register. This is only possible with the
// register bool set in users settings.
message RegisterRequest {
  oneof method {
    // User identifier & password for the new user.
    UserPassword user_password = 1;
  }
}

// Register response with tokens and user information.
message RegisterResponse {
  // Access and refresh token for the new logged in user.
  authentication.Token token = 1;
  // User ID of the new user.
  string user_id = 2;
  // Information about the new user.
  model.UserInfo user_info = 3;
}

// Request to send a reset password email to the user. This is only possible if
// an email provider is configured, and the user has an email.
message SendPasswordResetRequest {
  // User identifier of the user.
  model.UserIdentifier identifier = 1;
}

// Empty response to the send password reset request
message SendPasswordResetResponse {
  // JWT token to reset the password.
  string token = 1;
}

// Request to reset the password of a user with a verification code sent to the
// email.
message ResetPasswordRequest {
  // The 6 digit verification code
  string code = 1;
  // The new password
  string new_password = 2;
  // Identifier of the user
  model.UserIdentifier identifier = 3;
  // JWT token to reset the password.
  string token = 4;
}

// Empty response to the reset password request
message ResetPasswordResponse {}

// Request to delete the logged in user. The user ID etc. is taken from the
// token.
message DeleteRequest {}

// Empty response to the delete request.
message DeleteResponse {}

// Request to refresh the access and refresh token of the logged in user.
message RefreshTokenRequest {
  // The access token of the user
  // Refresh token matching the access token.
  string refresh_token = 1;
}

// Response with new access and refresh token.
message RefreshTokenResponse {
  // New refresh and access tokens
  authentication.Token token = 1;
}

// Empty Request to get the auth config containing the available login
// mechanisms and if self-registering is enabled.
message GetAuthConfigRequest {}

// Response with the auth config containing the available login mechanisms and
// if self-registering is enabled.
message GetAuthConfigResponse {
  // The name of the project
  string name = 1;
  // The logo of the project
  string logo_url = 2;
  // If to validate password
  bool validate_password = 3;
  // Array of supported login methods.
  repeated model.LoginType login_types = 4;
  // True if new users can sign up.
  bool allows_register = 7;
  // SSO login options
  repeated SSOOption sso_options = 8;
}

// The type of SSO. Currently only OIDC is supported.
enum SSOType {
  SSO_TYPE_UNSPECIFIED = 0;
  SSO_TYPE_OIDC = 1;
}

// A login option for using SSO. This might be merged into
// GetAuthConfigResponse.login_types, but is introduced as a separate field, to
// maintain backwards compatibility.
message SSOOption {
  // Type of SSO. Currently only OIDC is supported.
  SSOType type = 1;
  // ID of the SSO provider as given in the platform configuration.
  string provider_id = 2;
  // Name of SSO provider. This is an optional human readable version of the
  // provider ID.
  string name = 3;
  // URL of the underlying issuer. This can be used in the frontend for
  // showing specific items for certain known issuers.
  string icon = 4;
}

// Represents an SSO provided ID of a user
message SSOID {
  // What type of SSO this ID is from
  SSOType type = 1;
  // The ID of the SSO provider
  string provider_id = 2;
  // The ID provided by SSO
  string sso_id = 3;
  // The internal user ID
  string user_id = 4;
}
