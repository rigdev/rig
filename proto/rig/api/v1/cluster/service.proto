syntax = "proto3";

package api.v1.cluster;

import "api/v1/cluster/cluster.proto";
import "model/common.proto";

// The service to your cluster running Rig.
service Service {
  rpc List(ListRequest) returns (ListResponse) {}
  // GetConfig returns the config for the cluster.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {}
  // GetConfigs returns the configs for all clusters.
  rpc GetConfigs(GetConfigsRequest) returns (GetConfigsResponse) {}
}

// request for getting cluster config for an environment.
message GetConfigRequest {
  // The environment to get cluster config for.
  string environment_id = 1;
}

// response for getting cluster config for an environment.
message GetConfigResponse {
  // Type of the cluster.
  ClusterType cluster_type = 1;
  // dev registry of the cluster. This is either a Docker daemon or a registry.
  oneof dev_registry {
    // Docker.
    DockerDaemon docker = 2;
    // Registry.
    Registry registry = 3;
  }
  // if true, the cluster has an ingress controller.
  bool ingress = 4;
}

// Empty Request for getting the configs of all clusters.
message GetConfigsRequest {}

// Empty Response for getting the configs of all clusters.
message GetConfigsResponse {
  repeated GetConfigResponse clusters = 1;
}

// Docker daemon dev registry
message DockerDaemon {}

// Registry dev registry
message Registry {
  string host = 1;
}

// Cluster type - Docker or kubernetes.
enum ClusterType {
  CLUSTER_TYPE_UNSPECIFIED = 0;
  CLUSTER_TYPE_DOCKER = 1;
  CLUSTER_TYPE_KUBERNETES = 2;
}

// Request for listing available clusters.
message ListRequest {
  // Pagination options.
  model.Pagination pagination = 1;
}

// Response for listing available clusters.
message ListResponse {
  // List of clusters.
  repeated api.v1.cluster.Cluster clusters = 1;
}
