// Code generated by mockery v2.39.1. DO NOT EDIT.

package rig

import (
	authenticationconnect "github.com/rigdev/rig-go-api/api/v1/authentication/authenticationconnect"
	capsuleconnect "github.com/rigdev/rig-go-api/api/v1/capsule/capsuleconnect"

	clusterconnect "github.com/rigdev/rig-go-api/api/v1/cluster/clusterconnect"

	environmentconnect "github.com/rigdev/rig-go-api/api/v1/environment/environmentconnect"

	groupconnect "github.com/rigdev/rig-go-api/api/v1/group/groupconnect"

	imageconnect "github.com/rigdev/rig-go-api/api/v1/image/imageconnect"

	mock "github.com/stretchr/testify/mock"

	projectconnect "github.com/rigdev/rig-go-api/api/v1/project/projectconnect"

	service_accountconnect "github.com/rigdev/rig-go-api/api/v1/service_account/service_accountconnect"

	settingsconnect "github.com/rigdev/rig-go-api/api/v1/project/settings/settingsconnect"

	settingssettingsconnect "github.com/rigdev/rig-go-api/api/v1/user/settings/settingsconnect"

	userconnect "github.com/rigdev/rig-go-api/api/v1/user/userconnect"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Authentication provides a mock function with given fields:
func (_m *MockClient) Authentication() authenticationconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Authentication")
	}

	var r0 authenticationconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() authenticationconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Authentication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authentication'
type MockClient_Authentication_Call struct {
	*mock.Call
}

// Authentication is a helper method to define mock.On call
func (_e *MockClient_Expecter) Authentication() *MockClient_Authentication_Call {
	return &MockClient_Authentication_Call{Call: _e.mock.On("Authentication")}
}

func (_c *MockClient_Authentication_Call) Run(run func()) *MockClient_Authentication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Authentication_Call) Return(_a0 authenticationconnect.ServiceClient) *MockClient_Authentication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Authentication_Call) RunAndReturn(run func() authenticationconnect.ServiceClient) *MockClient_Authentication_Call {
	_c.Call.Return(run)
	return _c
}

// Capsule provides a mock function with given fields:
func (_m *MockClient) Capsule() capsuleconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Capsule")
	}

	var r0 capsuleconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() capsuleconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(capsuleconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Capsule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Capsule'
type MockClient_Capsule_Call struct {
	*mock.Call
}

// Capsule is a helper method to define mock.On call
func (_e *MockClient_Expecter) Capsule() *MockClient_Capsule_Call {
	return &MockClient_Capsule_Call{Call: _e.mock.On("Capsule")}
}

func (_c *MockClient_Capsule_Call) Run(run func()) *MockClient_Capsule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Capsule_Call) Return(_a0 capsuleconnect.ServiceClient) *MockClient_Capsule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Capsule_Call) RunAndReturn(run func() capsuleconnect.ServiceClient) *MockClient_Capsule_Call {
	_c.Call.Return(run)
	return _c
}

// Cluster provides a mock function with given fields:
func (_m *MockClient) Cluster() clusterconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cluster")
	}

	var r0 clusterconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() clusterconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clusterconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Cluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cluster'
type MockClient_Cluster_Call struct {
	*mock.Call
}

// Cluster is a helper method to define mock.On call
func (_e *MockClient_Expecter) Cluster() *MockClient_Cluster_Call {
	return &MockClient_Cluster_Call{Call: _e.mock.On("Cluster")}
}

func (_c *MockClient_Cluster_Call) Run(run func()) *MockClient_Cluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Cluster_Call) Return(_a0 clusterconnect.ServiceClient) *MockClient_Cluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Cluster_Call) RunAndReturn(run func() clusterconnect.ServiceClient) *MockClient_Cluster_Call {
	_c.Call.Return(run)
	return _c
}

// Environment provides a mock function with given fields:
func (_m *MockClient) Environment() environmentconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Environment")
	}

	var r0 environmentconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() environmentconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environmentconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Environment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Environment'
type MockClient_Environment_Call struct {
	*mock.Call
}

// Environment is a helper method to define mock.On call
func (_e *MockClient_Expecter) Environment() *MockClient_Environment_Call {
	return &MockClient_Environment_Call{Call: _e.mock.On("Environment")}
}

func (_c *MockClient_Environment_Call) Run(run func()) *MockClient_Environment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Environment_Call) Return(_a0 environmentconnect.ServiceClient) *MockClient_Environment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Environment_Call) RunAndReturn(run func() environmentconnect.ServiceClient) *MockClient_Environment_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields:
func (_m *MockClient) Group() groupconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 groupconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() groupconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(groupconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockClient_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
func (_e *MockClient_Expecter) Group() *MockClient_Group_Call {
	return &MockClient_Group_Call{Call: _e.mock.On("Group")}
}

func (_c *MockClient_Group_Call) Run(run func()) *MockClient_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Group_Call) Return(_a0 groupconnect.ServiceClient) *MockClient_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Group_Call) RunAndReturn(run func() groupconnect.ServiceClient) *MockClient_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Image provides a mock function with given fields:
func (_m *MockClient) Image() imageconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Image")
	}

	var r0 imageconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() imageconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(imageconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Image'
type MockClient_Image_Call struct {
	*mock.Call
}

// Image is a helper method to define mock.On call
func (_e *MockClient_Expecter) Image() *MockClient_Image_Call {
	return &MockClient_Image_Call{Call: _e.mock.On("Image")}
}

func (_c *MockClient_Image_Call) Run(run func()) *MockClient_Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Image_Call) Return(_a0 imageconnect.ServiceClient) *MockClient_Image_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Image_Call) RunAndReturn(run func() imageconnect.ServiceClient) *MockClient_Image_Call {
	_c.Call.Return(run)
	return _c
}

// Project provides a mock function with given fields:
func (_m *MockClient) Project() projectconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Project")
	}

	var r0 projectconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() projectconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(projectconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_Project_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Project'
type MockClient_Project_Call struct {
	*mock.Call
}

// Project is a helper method to define mock.On call
func (_e *MockClient_Expecter) Project() *MockClient_Project_Call {
	return &MockClient_Project_Call{Call: _e.mock.On("Project")}
}

func (_c *MockClient_Project_Call) Run(run func()) *MockClient_Project_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Project_Call) Return(_a0 projectconnect.ServiceClient) *MockClient_Project_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Project_Call) RunAndReturn(run func() projectconnect.ServiceClient) *MockClient_Project_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectSettings provides a mock function with given fields:
func (_m *MockClient) ProjectSettings() settingsconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProjectSettings")
	}

	var r0 settingsconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() settingsconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settingsconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_ProjectSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectSettings'
type MockClient_ProjectSettings_Call struct {
	*mock.Call
}

// ProjectSettings is a helper method to define mock.On call
func (_e *MockClient_Expecter) ProjectSettings() *MockClient_ProjectSettings_Call {
	return &MockClient_ProjectSettings_Call{Call: _e.mock.On("ProjectSettings")}
}

func (_c *MockClient_ProjectSettings_Call) Run(run func()) *MockClient_ProjectSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ProjectSettings_Call) Return(_a0 settingsconnect.ServiceClient) *MockClient_ProjectSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ProjectSettings_Call) RunAndReturn(run func() settingsconnect.ServiceClient) *MockClient_ProjectSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceAccount provides a mock function with given fields:
func (_m *MockClient) ServiceAccount() service_accountconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceAccount")
	}

	var r0 service_accountconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() service_accountconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service_accountconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_ServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceAccount'
type MockClient_ServiceAccount_Call struct {
	*mock.Call
}

// ServiceAccount is a helper method to define mock.On call
func (_e *MockClient_Expecter) ServiceAccount() *MockClient_ServiceAccount_Call {
	return &MockClient_ServiceAccount_Call{Call: _e.mock.On("ServiceAccount")}
}

func (_c *MockClient_ServiceAccount_Call) Run(run func()) *MockClient_ServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_ServiceAccount_Call) Return(_a0 service_accountconnect.ServiceClient) *MockClient_ServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ServiceAccount_Call) RunAndReturn(run func() service_accountconnect.ServiceClient) *MockClient_ServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessToken provides a mock function with given fields: accessToken, refreshToken
func (_m *MockClient) SetAccessToken(accessToken string, refreshToken string) {
	_m.Called(accessToken, refreshToken)
}

// MockClient_SetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessToken'
type MockClient_SetAccessToken_Call struct {
	*mock.Call
}

// SetAccessToken is a helper method to define mock.On call
//   - accessToken string
//   - refreshToken string
func (_e *MockClient_Expecter) SetAccessToken(accessToken interface{}, refreshToken interface{}) *MockClient_SetAccessToken_Call {
	return &MockClient_SetAccessToken_Call{Call: _e.mock.On("SetAccessToken", accessToken, refreshToken)}
}

func (_c *MockClient_SetAccessToken_Call) Run(run func(accessToken string, refreshToken string)) *MockClient_SetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_SetAccessToken_Call) Return() *MockClient_SetAccessToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_SetAccessToken_Call) RunAndReturn(run func(string, string)) *MockClient_SetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields:
func (_m *MockClient) User() userconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 userconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() userconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(userconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockClient_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockClient_Expecter) User() *MockClient_User_Call {
	return &MockClient_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockClient_User_Call) Run(run func()) *MockClient_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_User_Call) Return(_a0 userconnect.ServiceClient) *MockClient_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_User_Call) RunAndReturn(run func() userconnect.ServiceClient) *MockClient_User_Call {
	_c.Call.Return(run)
	return _c
}

// UserSettings provides a mock function with given fields:
func (_m *MockClient) UserSettings() settingssettingsconnect.ServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserSettings")
	}

	var r0 settingssettingsconnect.ServiceClient
	if rf, ok := ret.Get(0).(func() settingssettingsconnect.ServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(settingssettingsconnect.ServiceClient)
		}
	}

	return r0
}

// MockClient_UserSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserSettings'
type MockClient_UserSettings_Call struct {
	*mock.Call
}

// UserSettings is a helper method to define mock.On call
func (_e *MockClient_Expecter) UserSettings() *MockClient_UserSettings_Call {
	return &MockClient_UserSettings_Call{Call: _e.mock.On("UserSettings")}
}

func (_c *MockClient_UserSettings_Call) Run(run func()) *MockClient_UserSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_UserSettings_Call) Return(_a0 settingssettingsconnect.ServiceClient) *MockClient_UserSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_UserSettings_Call) RunAndReturn(run func() settingssettingsconnect.ServiceClient) *MockClient_UserSettings_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
