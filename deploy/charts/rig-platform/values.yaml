image:
  repository: ghcr.io/rigdev/rig-platform
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  # Specifies whether the ClusterRole and ClusterRoleBinding should be created
  create: true

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

port: 4747

loadBalancer:
  enabled: false
  nodePort: 30047

ingress:
  enabled: false
  host: ""

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, override the `null`s
  # in the following section.
  cpu:
    limit: null
    request: null
  memory:
    limit: null
    request: null

instances:
  min: 1
  max: 1
  autoscaling:
    enabled: false
    cpuUtilization: 80

nodeSelector: {}

tolerations: []

affinity: {}

mongodb:
  enabled: false
  image:
    repository: mongo
    tag: 6.0.8
    pullPolicy: IfNotPresent
  resources: {}
  storage:
    className: ""
    size: 10Gi
  args:

postgres:
  # enables development postgres instance. When this is set we will also setup
  # the required database connection configuration.
  enabled: false
  image:
    repository: postgres
    tag: 16
    pullPolicy: IfNotPresent
  resources: {}
  storage:
    className: ""
    size: 10Gi
  # The default mount point for the postgres volume is /var/lib/postgresql
  # If this is true it becomes /var/lib/postgresql/data
  appendDataToMountPoint: false

# Wether or not to load secret parts of the configuration from environment
# variables instead of a config file.
useEnvForSecrets: false

# Name of secret containing configuration for rig-sever. Set this if you use a
# special mechanism for generating secrets. If left unset, we will create the
# secret. If `useEnvForSecrets` is true we will use the secret as environment
# variables, otherwise we will mount the key `config.yaml` as a full
# rig-platform config file.
secretName: ""

# Rig holds configuration for the rig server. This is used for generating the
# rig-server config file. This configuration will be merged with any
# configuration found in the secret denoted by `secretName`. For detailed
# information about individual options, see the reference documentation at
# https://docs.rig.dev/api/config/v1alpha1#platformconfig.
rig:
  auth:
    secret: shhhdonotshare
    certificateFile: ""
    certificateKeyFile: ""

  telemetryEnabled: true

  client:
    postgres:
      host: ""
      insecure: false
      user: postgres
      password: postgres
      database: rig
    mongo:
      host: ""
      user: mongodb
      password: mongodb
    mailjet:
      apiKey: ""
      secretKey: ""
    smtp:
      password: ""
    operator:
      baseUrl: http://rig-operator:9000

  repository:
    store: postgres
    secret: ""

  cluster:
    devRegistry:
      host: ""
      clusterHost: ""
    git:
      url: ""
      branch: main
      pathPrefix: ""
      credentials:
        https:
          username: ""
          password: ""
        ssh:
          privateKey: ""
          privateKeyPassword: ""

  email:
    type: ""
    from: ""

  logging:
    devMode: false
    level: info

