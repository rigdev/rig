// Code generated by mockery v2.39.1. DO NOT EDIT.

package config

import (
	v1alpha1 "github.com/rigdev/rig/pkg/api/config/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Operator provides a mock function with given fields:
func (_m *MockService) Operator() *v1alpha1.OperatorConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Operator")
	}

	var r0 *v1alpha1.OperatorConfig
	if rf, ok := ret.Get(0).(func() *v1alpha1.OperatorConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.OperatorConfig)
		}
	}

	return r0
}

// MockService_Operator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operator'
type MockService_Operator_Call struct {
	*mock.Call
}

// Operator is a helper method to define mock.On call
func (_e *MockService_Expecter) Operator() *MockService_Operator_Call {
	return &MockService_Operator_Call{Call: _e.mock.On("Operator")}
}

func (_c *MockService_Operator_Call) Run(run func()) *MockService_Operator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Operator_Call) Return(_a0 *v1alpha1.OperatorConfig) *MockService_Operator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Operator_Call) RunAndReturn(run func() *v1alpha1.OperatorConfig) *MockService_Operator_Call {
	_c.Call.Return(run)
	return _c
}

// Platform provides a mock function with given fields:
func (_m *MockService) Platform() *v1alpha1.PlatformConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Platform")
	}

	var r0 *v1alpha1.PlatformConfig
	if rf, ok := ret.Get(0).(func() *v1alpha1.PlatformConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PlatformConfig)
		}
	}

	return r0
}

// MockService_Platform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Platform'
type MockService_Platform_Call struct {
	*mock.Call
}

// Platform is a helper method to define mock.On call
func (_e *MockService_Expecter) Platform() *MockService_Platform_Call {
	return &MockService_Platform_Call{Call: _e.mock.On("Platform")}
}

func (_c *MockService_Platform_Call) Run(run func()) *MockService_Platform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Platform_Call) Return(_a0 *v1alpha1.PlatformConfig) *MockService_Platform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Platform_Call) RunAndReturn(run func() *v1alpha1.PlatformConfig) *MockService_Platform_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
